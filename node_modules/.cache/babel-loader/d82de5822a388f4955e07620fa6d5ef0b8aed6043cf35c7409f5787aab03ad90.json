{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport jokesReducer from './jokesReducer';\nconst jokesConfig = {\n  key: 'jokes',\n  storage,\n  whitelist: ['favJokes']\n};\nconst persistedJokeReducer = persistReducer(jokesConfig, jokesReducer);\nexport const store = configureStore({\n  reducer: {\n    jokes: persistedJokeReducer\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]\n    }\n  }),\n  devTools: process.env.NODE_ENV !== 'production' // true\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\nexport const persistor = persistStore(store);","map":{"version":3,"names":["configureStore","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","jokesReducer","jokesConfig","key","whitelist","persistedJokeReducer","store","reducer","jokes","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","devTools","process","env","NODE_ENV","persistor"],"sources":["/Users/tetiana.tarasovych/Desktop/jokes_type-script/src/redux/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport jokesReducer from './jokesReducer';\n\nconst jokesConfig = {\n  key: 'jokes',\n  storage,\n  whitelist: ['favJokes'],\n};\n\nconst persistedJokeReducer = persistReducer(jokesConfig, jokesReducer);\n\nexport const store = configureStore({\n  reducer: {\n    jokes: persistedJokeReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n  devTools: process.env.NODE_ENV !== 'production', // true\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\nexport const persistor = persistStore(store);\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SACEC,YAAY,EACZC,cAAc,EACdC,KAAK,EACLC,SAAS,EACTC,KAAK,EACLC,OAAO,EACPC,KAAK,EACLC,QAAQ,QACH,eAAe;AACtB,OAAOC,OAAO,MAAM,2BAA2B;AAE/C,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,WAAW,GAAG;EAClBC,GAAG,EAAE,OAAO;EACZH,OAAO;EACPI,SAAS,EAAE,CAAC,UAAU;AACxB,CAAC;AAED,MAAMC,oBAAoB,GAAGZ,cAAc,CAACS,WAAW,EAAED,YAAY,CAAC;AAEtE,OAAO,MAAMK,KAAK,GAAGf,cAAc,CAAC;EAClCgB,OAAO,EAAE;IACPC,KAAK,EAAEH;EACT,CAAC;EACDI,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAAClB,KAAK,EAAEC,SAAS,EAAEC,KAAK,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ;IACpE;EACF,CAAC,CAAC;EACJc,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,CAAE;AACnD,CAAC,CAAC;;AAEF;;AAKA,OAAO,MAAMC,SAAS,GAAGzB,YAAY,CAACc,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}