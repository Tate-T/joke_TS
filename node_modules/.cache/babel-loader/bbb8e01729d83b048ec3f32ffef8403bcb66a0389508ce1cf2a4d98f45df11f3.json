{"ast":null,"code":"import{configureStore}from'@reduxjs/toolkit';import{persistStore,persistReducer,FLUSH,REHYDRATE,PAUSE,PERSIST,PURGE,REGISTER}from'redux-persist';import storage from'redux-persist/lib/storage';import jokesReducer from'./jokesReducer';var jokesConfig={key:'jokes',storage:storage,whitelist:['favJokes']};var persistedJokeReducer=persistReducer(jokesConfig,jokesReducer);export var store=configureStore({reducer:{jokes:persistedJokeReducer},middleware:function middleware(getDefaultMiddleware){return getDefaultMiddleware({serializableCheck:{ignoredActions:[FLUSH,REHYDRATE,PAUSE,PERSIST,PURGE,REGISTER]}});},devTools:process.env.NODE_ENV!=='production'// true\n});// Infer the `RootState` and `AppDispatch` types from the store itself\nexport var persistor=persistStore(store);","map":{"version":3,"names":["configureStore","persistStore","persistReducer","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","storage","jokesReducer","jokesConfig","key","whitelist","persistedJokeReducer","store","reducer","jokes","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","devTools","process","env","NODE_ENV","persistor"],"sources":["/Users/tetiana.tarasovych/Desktop/jokes_type-script/src/redux/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport jokesReducer from './jokesReducer';\n\nconst jokesConfig = {\n  key: 'jokes',\n  storage,\n  whitelist: ['favJokes'],\n};\n\nconst persistedJokeReducer = persistReducer(jokesConfig, jokesReducer);\n\nexport const store = configureStore({\n  reducer: {\n    jokes: persistedJokeReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n  devTools: process.env.NODE_ENV !== 'production', // true\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n\nexport const persistor = persistStore(store);\n"],"mappings":"AAAA,OAASA,cAAc,KAAQ,kBAAkB,CACjD,OACEC,YAAY,CACZC,cAAc,CACdC,KAAK,CACLC,SAAS,CACTC,KAAK,CACLC,OAAO,CACPC,KAAK,CACLC,QAAQ,KACH,eAAe,CACtB,MAAO,CAAAC,OAAO,KAAM,2BAA2B,CAE/C,MAAO,CAAAC,YAAY,KAAM,gBAAgB,CAEzC,GAAM,CAAAC,WAAW,CAAG,CAClBC,GAAG,CAAE,OAAO,CACZH,OAAO,CAAPA,OAAO,CACPI,SAAS,CAAE,CAAC,UAAU,CACxB,CAAC,CAED,GAAM,CAAAC,oBAAoB,CAAGZ,cAAc,CAACS,WAAW,CAAED,YAAY,CAAC,CAEtE,MAAO,IAAM,CAAAK,KAAK,CAAGf,cAAc,CAAC,CAClCgB,OAAO,CAAE,CACPC,KAAK,CAAEH,oBACT,CAAC,CACDI,UAAU,CAAE,SAAAA,WAACC,oBAAoB,QAC/B,CAAAA,oBAAoB,CAAC,CACnBC,iBAAiB,CAAE,CACjBC,cAAc,CAAE,CAAClB,KAAK,CAAEC,SAAS,CAAEC,KAAK,CAAEC,OAAO,CAAEC,KAAK,CAAEC,QAAQ,CACpE,CACF,CAAC,CAAC,GACJc,QAAQ,CAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAc;AACnD,CAAC,CAAC,CAEF;AAKA,MAAO,IAAM,CAAAC,SAAS,CAAGzB,YAAY,CAACc,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}